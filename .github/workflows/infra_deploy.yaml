name: terraform build and deployment

on: 
  push:
    # branches:
    #   - main
    #   - feature*
  pull_request:

env:
  AWS_REGION: "us-east-1"
  GITHUB_ROLE_ARN: "arn:aws:iam::288761748973:role/github_oidc_role-dev"

permissions:
  id-token: write  # This is required for requesting the JWT
  contents: read   # This is required for actions/checkout

jobs:
    linting:
        runs-on: ubuntu-latest
        steps:
            - name: Checkout repository
              uses: actions/checkout@v4

            - name: Set up Terraform
              uses: hashicorp/setup-terraform@v3
              with:
                terraform_version: 1.10.5

            - name: Install tflint
              run: |
                curl -s https://raw.githubusercontent.com/terraform-linters/tflint/master/install_linux.sh | bash
            - name: Run tflint
              run: |
                tflint --version
                find . -type f -name "*.tf" | xargs -I {} dirname {} | sort -u | while read DIR; do
                  echo "Running terraform linter in the : $DIR"
                  (cd "$DIR" && tflint) || {
                    echo "tflint failed in $DIR, please fix the issues"
                    exit 1; 
                  }
                done
    terraform-fmt:
            needs: linting
            runs-on: ubuntu-latest
            steps:
                - name: Checkout repository
                  uses: actions/checkout@v4

                - name: Set up Terraform
                  uses: hashicorp/setup-terraform@v3
                  with:
                    terraform_version: 1.10.5

                - name: Run terraform fmt
                  run: |
                    find . -type f -name "*.tf" | xargs -I {} dirname {} | sort -u | while read DIR; do
                      echo "Running terraform fmt in the : $DIR"
                      (cd "$DIR" && terraform fmt -check=true) || {
                        echo "terraform fmt failed in $DIR, please run terraform fmt to fix the errors"
                        exit 1;
                      }
                    done
    
    terraform-validate: 
        needs: terraform-fmt
        runs-on: ubuntu-latest
        steps:
            - name: Checkout repository
              uses: actions/checkout@v4

            - name: Set up Terraform
              uses: hashicorp/setup-terraform@v3
              with:
                terraform_version: 1.10.5
            - name: Install tflint
              run: |
               curl -s https://raw.githubusercontent.com/terraform-linters/tflint/master/install_linux.sh | bash
      
            - name: Run terraform validate
              run: |
                find . -type f -name "*.tf" | xargs -I {} dirname {} | sort -u | while read DIR; do
                  echo "Running terraform validate in the : $DIR"
                  (cd "$DIR" && terraform init -input=false -backend=false && terraform validate && tflint) || { 
                    echo "terraform validate failed in $DIR, please fix the errors"; 
                    exit 1; 
                  }
                done
    tfsec:
        needs: terraform-validate
        runs-on: ubuntu-latest
        steps:
            - name: Checkout repository
              uses: actions/checkout@v4

            - name: Set up Terraform
              uses: hashicorp/setup-terraform@v3
              with:
                 terraform_version: 1.10.5

            - name: Install tfsec
              run: |
                curl -s https://raw.githubusercontent.com/aquasecurity/tfsec/master/scripts/install_linux.sh | bash
                apt update && apt install -y golang-go
                # go install github.com/aquasecurity/tfsec/cmd/tfsec@latest
                tfsec --version
            # - name: Run tfsec
            #   run: |
            #     echo "Running tfsec for severity CRITICAL"
            #     tfsec . -m CRITICAL
            #     echo "Running tfsec detailed report"
            #     tfsec . --run-statistics
    service-build:
      # needs: tfsec
      runs-on: ubuntu-latest
      steps:
        - name: Checkout repository
          uses: actions/checkout@v4
        - name: Set up Python
          uses: actions/setup-python@v4
          with:
            python-version: '3.12'
        - name: Install dependencies
          run: |
              cd $GITHUB_WORKSPACE
              python -m pip install --upgrade pip
              pip install -r service/requirements.txt -t service/python/
    terraform-deploy:
        needs:
          - tfsec
          - service-build
        runs-on: ubuntu-latest
        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Set up Terraform
              uses: hashicorp/setup-terraform@v3
              with:
                terraform_version: 1.10.5
            - name: Set up Python
              uses: actions/setup-python@v4
              with:
                python-version: '3.12'

            - name: configure aws auth
              uses: aws-actions/configure-aws-credentials@v4.0.3
              with:
                role-to-assume: ${{ env.GITHUB_ROLE_ARN }}
                role-session-name: GitHub_to_AWS_via_FederatedOIDC
                aws-region: ${{ env.AWS_REGION }}
            - name: Install dependencies
              run: |
                  cd $GITHUB_WORKSPACE
                  python -m pip install --upgrade pip
                  pip install -r service/requirements.txt -t service/python/
              
            - name: Initialize Terraform plan and apply in ${{env.environment}}
              env:
                environment: stg
              run: |
                cd $GITHUB_WORKSPACE/infrastructure/lambda
                echo -e "\033[0;32mRunning terraform init in: $(basename $(pwd))\033[0m"
                terraform init -reconfigure
                terraform workspace new ${{env.environment}} || terraform workspace select ${{env.environment}} 
                terraform plan --var-file="${{env.environment}}.tfvars" 
                # terraform apply --var-file="${{env.environment}}.tfvars" -auto-approve || exit 1
                cd $GITHUB_WORKSPACE/infrastructure/s3
                terraform init -reconfigure
                terraform workspace new ${{env.environment}} || terraform workspace select ${{env.environment}} 
                terraform plan --var-file="${{env.environment}}.tfvars" 
                # terraform apply --var-file="${{env.environment}}.tfvars" -auto-approve || exit 1
                sleep 10
                echo "Running your resources view..,"
                echo "### Terraform Resource Summary" >> terraform_resources.md
                terraform plan -out=tfplan.binary
                terraform show -json tfplan.binary | jq '.resource_changes[].address' >> terraform_resources.md
                cat terraform_resources.md

                
